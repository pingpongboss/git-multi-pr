#!/bin/bash

usage() {
  echo "TODO"
}

master="master"

bold=$(tput bold)
normal=$(tput sgr0)

cmd=$(basename "${BASH_SOURCE[0]}")

new_queue() {
  if [ -z "$1" ]; then
    usage
    exit 1
  fi

  echo "Creating new branch $1"
  git checkout "origin/$master" &>/dev/null
  git checkout -b "$1"
}

print_queue() {
  local branch="$(_git_get_branch)"
  local refs="$(_git_get_commits)"
  local IFS=$'\n' refs_array=($refs)
  local count="${#refs_array[@]}"

  echo
  echo "Local commit queue for $branch:"

  if [ "$count" -eq 0 ]; then
    echo "All of your commits have already landed on origin/$master."
  else
    _print_augmented_queue "$refs"
  fi
}

_print_augmented_queue() {
  local refs="$1"
  local IFS=$'\n' refs_array=($refs)

  for ref in "${refs_array[@]}"; do
    local url="$(_get_ref_pr_url "$ref")"

    local sha_format="%C(yellow)%h"
    if [ -z "$url" ]; then
      local url_format=""
    else
      local url_format=" %C(reset)%C(ul)$url%C(noul)"
    fi
    local ref_format="%C(green bold)%d"
    local subject_format="%C(reset)%s"

    echo "$(git log -n 1 --color --pretty=format:"$sha_format$url_format$ref_format $subject_format" "$ref")"
  done
}

sync_queue() {
  git fetch origin
  git rebase "origin/$master"

  echo
  _cleanup_ref_branches "_git-multi-pr-"
}

_cleanup_ref_branches() {
  # TODO: This currently only checks if the branch is empty.
  # We should also check if it only contains commits that have been removed from the local queue.

  local prefix="$1"

  local current_branch="$(_git_get_branch)"
  local empty_branches=()

  # Ensure clean branch.
  _git_check_clean_state || { echo "$current_branch has uncommitted changes. Exiting."; return 1; }

  if [ -z "$prefix" ]; then
    local filter="refs/heads/"
  else
    local filter="refs/heads/$prefix*"
  fi

  echo "Checking for empty branches..."
  for branch in $(git for-each-ref --format='%(refname:short)' $filter); do
    git checkout "$branch" &>/dev/null
    git rebase "origin/$master" &>/dev/null

    # A conflict means local commits exist.
    _git_check_clean_state || { git rebase --abort; continue; }

    local commits=$(_git_get_commits)
    if [ -z "$commits" ] && [ "$branch" != "$master" ]; then
      empty_branches+=("$branch")
    fi
  done

  if [ "${#empty_branches[@]}" -eq 0 ]; then
    echo "Didn't find any empty branches. Exiting."
    git checkout "$current_branch" &>/dev/null
    return 0
  fi

  echo "Found empty branches:"
  printf '\t%s\n' "${empty_branches[@]}"

  if [ -z "$prefix" ]; then
    echo
    echo "Delete these empty branches? [y/N]: "
    read prompt
  else
    local prompt="y"
  fi

  case "$prompt" in
    y | Y)
      echo "Cleaning up..."
      ;;
    *)
      echo "Cleanup cancelled. Exiting."
      git checkout "$current_branch" &>/dev/null
      return 1
      ;;
  esac

  git checkout "$master" &>/dev/null
  for branch in "${empty_branches[@]}"; do
    git branch -D "$branch" &>/dev/null
  done

  git checkout "$current_branch" &>/dev/null
}

edit_ref() {
  _edit_ref "$@"

  if _git_check_rebase_state; then
    echo
    echo "Remember to call '$cmd continue' after you make your changes, or '$cmd abort' to cancel."
  fi
}

_edit_ref() {
  if [ -z "$1" ]; then
    git rebase -i "origin/$master"
    return 0
  fi

  local sha="$(_get_sha_in_local_queue "$1")"
  local rebase_command="edit"
  if [ $# -ge 2 ]; then
      rebase_command="$2"
  fi

  echo "Entering rebase for $1 == $sha with command $rebase_command."
  # Replace "pick $sha" and "# pick $sha" with "$rebase_command $sha".
  local regex="'s/^\(# \)\{0,1\}pick $sha/$rebase_command $sha/'"
  GIT_SEQUENCE_EDITOR="sed -i -e $regex" git rebase -i "origin/$master" &>/dev/null
}

continue_rebase() {
  _continue_rebase "$@"

  # Detect conflict.
  _git_check_clean_state || {
    echo "Resolve the conflicts and continue the rebase again."
    return 0
  }

  print_queue
}

_continue_rebase() {
  echo "Exiting rebase."
  git rebase --continue
}

abort_rebase() {
  _abort_rebase "$@"

  print_queue
}

_abort_rebase() {
  echo "Aborting rebase."
  git rebase --abort
}

_get_sha_in_local_queue() {
  local ref="$1"
  local upper_ref="$(echo "$ref" | tr '[:lower:]' '[:upper:]')"

  if [[ "$upper_ref" == "BASE" ]] || [[ "$upper_ref" == "BASE+"* ]]; then
    local count="$(_git_get_commits | wc -l)"

    if [[ "$upper_ref" == "BASE" ]]; then
      local index="0"
    else
      local index="${ref#BASE+}"
      if [[ -z "$index" ]]; then
        index="1"
      fi
    fi

    ref="HEAD~$(($count - $index - 1))"
  fi

  ref="$(_git_get_commit_sha "$ref")"

  if [[ ! -z "$ref" ]] && ! _is_local_ref "$ref"; then
    echo "ref $1 is not a local commit in your queue." 1>&2
    echo "Run '$cmd queue' to find a local commit, or use a relative ref like HEAD~." 1>&2
    exit 1
  fi

  echo "$ref"
}

_is_local_ref() {
  local refs="$(_git_get_commits)"
  for ref in $refs; do
    if [ "$ref" == "$1" ]; then
      return 0
    fi
  done

  return 1
}

export_prs() {
  local branch="$(_git_get_branch)"

  local refs="$(_git_get_commits)"
  local IFS=$'\n' refs_array=($refs)

  # For each commit in the queue (oldest first), create a hidden branch and PR.
  local count="${#refs_array[@]}"
  local i="$(($count-1))"

  local prev_ref_branch="origin/$master"
  while [ $i -ge 0 ]; do
    local ref="HEAD~$i"

    # Break on first WIP commit.
    local subject="$(_git_get_commit_subject "$ref")"
    if [[ "$subject" == "WIP"* ]]; then
      echo
      echo "${bold}Found WIP commit at $ref: $subject${normal}"
      echo "Stopping."
      break
    fi

    echo
    echo "${bold}Exporting commit at $ref: $subject.${normal}"

    # Create hidden branch.
    local ref_branch="$(_generate_ref_branch_name "$ref")"
    echo "Will use hidden branch $ref_branch for $ref."
    _delete_ref_branch "$ref_branch" "$ref"
    _create_ref_branch "$prev_ref_branch" "$ref_branch" "$ref"

    # Create PR.
    _create_ref_pr "$prev_ref_branch" "$ref_branch" "$ref"

    i="$(($i-1))"
    prev_ref_branch="$ref_branch"
    git checkout "$branch" &>/dev/null
  done

  git checkout "$branch" &>/dev/null

  print_queue
}

_generate_ref_branch_name() {
  local ref="$1"

  local ref_branch="$(_get_ref_branch_name "$ref")"
  if [[ ! -z "$ref_branch" ]]; then
    echo "$ref_branch"
    return 0
  fi

  # Prefix.
  ref_branch="_git-multi-pr-"

  # Pick a few words from the subject.
  local subject="$(_git_get_commit_subject "$ref")"
  subject="$(echo "$subject" | tr ' ' '\n')"
  local IFS=$'\n' words=($subject)

  local num=0
  for word in "${words[@]}"; do
    word="$(echo "$word" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]')"
    ref_branch="$ref_branch-$word"

    num=$((num + 1))
    if [ "$num" -ge "3" ]; then
      break
    fi
  done

  # Suffix.
  ref_branch="$ref_branch-$(uuidgen)"

  echo "$ref_branch"
}

_delete_ref_branch() {
  local ref_branch="$1"
  local ref="$2"

  git rev-parse --verify "$ref_branch" &>/dev/null
  if [ $? -eq 0 ]; then
    git branch -D "$ref_branch" &>/dev/null
  fi

  _remove_ref_commit_message "$ref" "GIT_MULTI_BRANCH="
}

_create_ref_branch() {
  local prev_ref_branch="$1"
  local ref_branch="$2"
  local ref="$3"

  local branch="$(_git_get_branch)"

  git branch -D "$ref_branch" &>/dev/null

  _append_ref_commit_message "$ref" "GIT_MULTI_BRANCH=$ref_branch"

  local sha="$(_get_sha_in_local_queue "$ref")"

  echo "Creating hidden branch $ref_branch for $ref."
  git checkout "$prev_ref_branch" &>/dev/null
  git checkout -b "$ref_branch" &>/dev/null
  git cherry-pick "$sha" &>/dev/null

  echo "Pushing hidden branch $ref_branch to remote."
  local remote_branch="$(_get_remote_ref_branch "$ref_branch")"
  git push -f origin "$ref_branch:$remote_branch" &>/dev/null

  git checkout "$branch" &>/dev/null
}

_append_ref_commit_message() {
  local ref="$1"
  local message="$2"

  echo "Adding $message to commit message of $ref."
  _edit_ref "$ref" &>/dev/null
  # Ensure only one single empty line before $message.
  git filter-branch -f --msg-filter "$cmd _ref_commit_message_helper append $message" HEAD~..HEAD &>/dev/null
  _continue_rebase &>/dev/null
}

_remove_ref_commit_message() {
  local ref="$1"
  local message="$2"

  echo "Removing $message from commit message of $ref."
  _edit_ref "$ref"
  git filter-branch -f --msg-filter "$cmd _ref_commit_message_helper remove $message" HEAD~..HEAD
  _continue_rebase
}

_ref_commit_message_helper() {
  local operation="$1"
  local message="$2"
  local commit="$(cat)"

  local empty_lines=0
  local encountered_metadata=false

  while IFS=$'\n' read line; do
    if [ -z "$line" ]; then
      empty_lines="$(($empty_lines+1))"
      continue
    fi

    if [[ "$operation" == "remove" ]] && [[ "$line" == "$message"* ]]; then
      continue
    fi

    if [[ "$line" =~ ^[A-Z_]+= ]]; then
      if $encountered_metadata ; then
        empty_lines=0
      else
        empty_lines=1
      fi

      encountered_metadata=true
    fi

    if [[ "$empty_lines" -ne "0" ]]; then
      printf '\n%.0s' {1..$empty_lines}
    fi
    echo "$line"
  done < <(echo "$commit")

  if [[ "$operation" == "append" ]]; then
    if ! $encountered_metadata ; then
      echo
    fi
    echo "$message"
  fi
}

_get_remote_ref_branch() {
  local ref_branch="$1"

  local email="$(git config user.email)"
  local username="${email%@*}"

  echo "$username$ref_branch"
}

_create_ref_pr() {
  echo
  echo "Creating PR for $ref_branch."

  local prev_ref_branch="$1"
  local ref_branch="$2"
  local ref="$3"

  local repo_org="$(_get_repo_org)"
  local repo_name="$(_get_repo_name)"
  local pr_url="$(_get_ref_pr_url "$ref")"
  local number="$(basename "$pr_url")"

  local title="$(_git_get_commit_subject "$ref")"
  local body="$(_git_get_commit_body "$ref")"
  body="$(echo "$body" | $cmd _ref_commit_message_helper remove GIT_MULTI_BRANCH= | $cmd _ref_commit_message_helper remove PR=)"

  if [[ "$prev_ref_branch" == "origin/$master" ]]; then
    local prev_remote_branch="$master"
  else
    local prev_remote_branch="$(_get_remote_ref_branch "$prev_ref_branch")"
  fi
  local remote_branch="$(_get_remote_ref_branch "$ref_branch")"

  if [ -z "$pr_url" ] || _is_closed_issue "$pr_url"; then
    echo "> ok.sh create_pull_request \"$repo_org/$repo_name\" \"$title\" \"$remote_branch\" \"$prev_remote_branch\" body=\"$body\""
    local response="$(ok.sh create_pull_request "$repo_org/$repo_name" "$title" "$remote_branch" "$prev_remote_branch" body="$body")"

    pr_url="$(echo "$response" | cut -f2)"

    if [ ! -z "$pr_url" ]; then
      _remove_ref_commit_message "$ref" "PR="
      _append_ref_commit_message "$ref" "PR=$pr_url"
    else
      echo "Failed to create pull request."
      return 1
    fi
  else
    echo "Found existing PR #$number for $ref_branch."

    echo "> ok.sh update_pull_request \"$repo_org/$repo_name\" \"$number\" title=\"$title\" body=\"$body\" base=\"$prev_remote_branch\" state=\"open\""
    ok.sh update_pull_request "$repo_org/$repo_name" "$number" title="$title" body="$body" base="$prev_remote_branch" state="open" &>/dev/null
  fi

}

_get_repo_org() {
  # Take the repo url.
  local repo_url="$(git remote get-url --push origin)"
  # Remove the extension.
  repo_url="${repo_url%.*}"
  # Convert : and / to new lines.
  repo_url="$(echo "$repo_url" | tr ':' '\n' | tr '/' '\n')"
  # Split into array.
  local IFS=$'\n' repo_components=($repo_url)
  local count="${#repo_components[@]}"

  local repo_org_index="$(($count-2))"
  echo "${repo_components[$repo_org_index]}"
}

_get_repo_name() {
  # Take the repo url.
  local repo_url="$(git remote get-url --push origin)"
  # Remove the extension.
  repo_url="${repo_url%.*}"
  # Convert : and / to new lines.
  repo_url="$(echo "$repo_url" | tr ':' '\n' | tr '/' '\n')"
  # Split into array.
  local IFS=$'\n' repo_components=($repo_url)
  local count="${#repo_components[@]}"

  local repo_name_index="$(($count-1))"
  echo "${repo_components[$repo_name_index]}"
}

_is_closed_issue() {
  local issue_url="$1"

  local repo_org="$(_get_repo_org)"
  local repo_name="$(_get_repo_name)"
  local number="$(basename "$issue_url")"

  local filter='"\(.number)\t\(.state)"'

  local response="$(ok.sh _get "/repos/$repo_org/$repo_name/issues/$number" | ok.sh _filter_json "${filter}")"
  local state="$(echo "$response" | cut -f2)"

  if [[ "$state" == "open" ]]; then
    return 1
  else
    return 0
  fi
}

_get_ref_branch_name() {
  local ref="$1"
  local body="$(_git_get_commit_body "$ref")"
  echo "$body" | while read -r line; do
    if [[ "$line" == "GIT_MULTI_BRANCH="* ]]; then
      echo "${line#GIT_MULTI_BRANCH=}"
      break
    fi
  done
}

_get_ref_pr_url() {
  local ref="$1"
  local body="$(_git_get_commit_body "$ref")"
  echo "$body" | while read -r line; do
    if [[ "$line" == "PR="* ]]; then
      echo "${line#PR=}"
      break
    fi
  done
}

submit_pr() {
  git fetch origin &>/dev/null

  echo "{bold}First re-exporting your local queue.{normal}"
  export_prs

  local refs="$(_git_get_commits --reverse)"
  local IFS=$'\n' refs_array=($refs)
  local ref="${refs_array[0]}"

  echo
  echo "The next commit to be submitted is: $(git log -n 1 --oneline --no-decorate "$ref")"

  echo "If this is not what you want to submit, then reorder your local history first."
  echo "Do you want to submit $ref? [y/N]: "
  read prompt
  echo

  case "$prompt" in
    y | Y)
      local repo_org="$(_get_repo_org)"
      local repo_name="$(_get_repo_name)"
      local pr_url="$(_get_ref_pr_url "$ref")"
      local number="$(basename "$pr_url")"

      echo "> ok.sh add_comment \"$repo_org/$repo_name\" \"$number\" \":dash:\""
      ok.sh add_comment "$repo_org/$repo_name" "$number" ":dash:"

      echo "Check $pr_url for the status on your submission."
      echo "When it is merged into master, sync your local queue."
      ;;
    *)
      echo "Submit cancelled. Exiting."
      return 1
      ;;
  esac
}

_git_get_branch() {
  git symbolic-ref --short -q $@ HEAD
}

_git_get_commits() {
  git rev-list --abbrev-commit $@ "origin/$master"..
}

_git_get_commit_sha() {
  if [ -z "$1" ]; then
    usage
    exit 1
  fi

  git rev-parse --short $@ 2>/dev/null
}

_git_get_commit_subject() {
  if [ -z "$1" ]; then
    usage
    exit 1
  fi

  git log -n 1 --pretty=format:%s $@
}

_git_get_commit_body() {
  if [ -z "$1" ]; then
    usage
    exit 1
  fi

  git log -n 1 --pretty=format:%b $@
}

_git_check_clean_state() {
  git diff-index --quiet $@ HEAD --
}

_git_check_rebase_state() {
  (test -d "$(git rev-parse --git-path rebase-merge)" ||  \
    test -d "$(git rev-parse --git-path rebase-apply)" ) \
  || return 1

  return 0
}

case "$1" in
  # Step 1
  new)                                  new_queue "${@:2}" ;;

  # Step 2
  queue)                                print_queue "${@:2}" ;;
  sync)                                 sync_queue "${@:2}" ;;
  edit)                                 edit_ref "${@:2}" ;;
  continue)                             continue_rebase "${@:2}" ;;
  abort)                                abort_rebase "${@:2}" ;;

  # Step 3
  export)                               export_prs "${@:2}" ;;

  # Step 4
  submit)                               submit_pr "${@:2}" ;;

  # Private
  _is_local_ref)                        _is_local_ref "${@:2}" ;;
  _get_sha_in_local_queue)              _get_sha_in_local_queue "${@:2}" ;;
  _get_ref_pr_url)                      _get_ref_pr_url "${@:2}" ;;
  _get_ref_branch_name)                 _get_ref_branch_name "${@:2}" ;;
  _create_ref_branch)                   _create_ref_branch "${@:2}" ;;
  _generate_ref_branch_name)            _generate_ref_branch_name "${@:2}" ;;
  _append_ref_commit_message)           _append_ref_commit_message "${@:2}" ;;
  _remove_ref_commit_message)           _remove_ref_commit_message "${@:2}" ;;
  _create_ref_pr)                       _create_ref_pr "${@:2}" ;;
  _cleanup_ref_branches)                _cleanup_ref_branches "${@:2}" ;;
  _is_open_issue)                       _is_open_issue "${@:2}" ;;

  # Helper
  _ref_commit_message_helper)           _ref_commit_message_helper "${@:2}" ;;


  # Help
  *)                             usage ;;
esac
